@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@model MySocial.WebUI.ViewModel.PostViewModel
@{
    ViewData["title"] = "Messages";
    var requestToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}
<div class="container py-5">
    <div class="search-wrapper">
        <div class="search-box">
            <input id="UserSearchInput" type="text" class="search-input form-control" placeholder="Search users to chat">

            <div class="suggestions">
            </div>
        </div>
        <div class="mt-4">
            <h1>Chats</h1>
            <div id="chatList">
                <p>No chats available, message a user.</p>
            </div>
        </div>
    </div>
</div>
<input id="RequestVerificationToken" type="hidden" value="@requestToken" />
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    const baseUrl = "https://localhost:7164/api/";
    let users;
    let lastMessages;
    const UserSearchInput = document.querySelector("#UserSearchInput")
    const suggestions = document.querySelector(".suggestions")

    const FetchUsers = async() => {
        try{
            const response = await axios.get(baseUrl + "user/", {
                 headers: {
                     "RequestVerificationToken" : document.getElementById("RequestVerificationToken").value
                 }
             })

             users = response.data.filter(user => user.id != "@Model.UserId");
             console.log(users)

        }catch(error){
            console.log("error fetching users: " + users )
        }
    }
    const SuggestionItem = (user) =>{
    return (
    `
            <a href="/Message/Chat?receiverId=${user.id}" class="text-decoration-none text-body">
    <div class="suggestion-item">
    <i class="fas fa-fire"></i>
    ${user.userName}
    </div>
    </a>
    `
    )
    }

        const ChatCard = (comment) => {
               return( `
                           <a href="/Message/Chat?receiverId=${comment.receiver.id}" class="text-decoration-none text-body">
               <div class="container bg-white my-3 rounded-1 shadow-sm chat" style="max-width:600px;">
          <div class="d-flex align-items-start p-3">
            <img src="/${comment.receiver.profilePictureUrl}" alt="Profile Picture" class="rounded-circle me-3" width="50" height="50" />

            <div class="flex-grow-1">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <strong class="me-2">${comment.receiver.userName}</strong>
                  
                  <small class="text-muted timestamp">
                    ${new Date(comment.createdAt).toLocaleString(undefined, {
                      day: 'numeric',
                      month: 'long',
                      year: 'numeric'
                    })}
                  </small>
                                    <div class="text-xl-start mb-2">
                    <p class="mb-2">${comment.content}</p>
                  </div>
                </div>
          </div>
        </div> 
          </div>
              </a>
          `)
        }

const FetchMessages = async () => {
    const ChatList = document.querySelector("#chatList");
        try {
                    const response = await axios.get(baseUrl + `Message/MessagedUser/@Model.UserId`, {
                     headers: {
                         "RequestVerificationToken" : document.getElementById("RequestVerificationToken").value
                     }
            });
            console.log(response.data)
                lastMessages = response.data;
                    ChatList.innerHTML = "";
                lastMessages.forEach(m => {
                        ChatList.innerHTML += ChatCard(m)
                })
        } catch (error) {
            console.log("error fetching messages " + error);
        }
    };

    const SearchUser = () => {
        const query = UserSearchInput.value.toLowerCase();
        suggestions.innerHTML = ""

        if(query.length < 1) return;

        const matches = users.filter(u => u.userName.toLowerCase().includes(query));

        if (matches.length === 0) {
            suggestions.innerHTML = `<div class="suggestion-item text-muted">No matches found</div>`;
        } else {
            matches.forEach(user => {
                suggestions.innerHTML += SuggestionItem(user);
            });
        }
    };
    UserSearchInput.addEventListener("keydown", SearchUser)
        document.addEventListener("DOMContentLoaded", FetchUsers)
                document.addEventListener("DOMContentLoaded", FetchMessages)
</script>