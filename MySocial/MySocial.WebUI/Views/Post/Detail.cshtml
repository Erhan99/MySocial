@model MySocial.WebUI.ViewModel.PostViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    ViewData["title"] = "detail";
    int postId = Model.postId; 
    string logged = Model.UserId;
    string imageUrl = Model.profilePictureUrl;
    var requestToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}
<input id="RequestVerificationToken" type="hidden" value="@requestToken" />
<section id="postArea">

</section>
<section id="commentsArea">
</section>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    let postData; 
     const loggedUserId = "@logged";
    const PostCard = (post) => {
        return(
                   `<div class="container bg-white my-3 rounded-1 shadow-sm post" style="max-width:600px;">
      <div class="d-flex align-items-start p-3">
        <img src="/${post.user.profilePictureUrl}" alt="Profile Picture" class="rounded-circle me-3" width="50" height="50" />

        <div class="flex-grow-1">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <strong class="me-2">${post.user.userName}</strong>
              <span class="text-muted me-2">·</span>
              <small class="text-muted timestamp">
                ${new Date(post.createdAt).toLocaleString(undefined, {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                  hour: 'numeric',
                  minute: '2-digit'
                })}
              </small>
            </div>

            <div class="dropdown ">
              <button class="btn" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="black">
                  <path d="M240-400q-33 0-56.5-23.5T160-480q0-33 23.5-56.5T240-560q33 0 56.5 23.5T320-480q0 33-23.5 56.5T240-400Zm240 0q-33 0-56.5-23.5T400-480q0-33 23.5-56.5T480-560q33 0 56.5 23.5T560-480q0 33-23.5 56.5T480-400Zm240 0q-33 0-56.5-23.5T640-480q0-33 23.5-56.5T720-560q33 0 56.5 23.5T800-480q0 33-23.5 56.5T720-400Z" />
                </svg>
              </button>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <button type="button" class="dropdown-item edit" data-post-id="${post.id}">Edit</button>
                <form class="deletePostForm" data-post-id="${post.id}">
                  <button type="submit" class="dropdown-item">Delete</button>
                </form>
              </div>
            </div>
          </div>

          <div id="post-content-${post.id}" class="text-xl-start mb-2">
            <p class="mb-2">${post.content}</p>
          </div>

          <div class="d-flex align-items-center gap-3 mt-3">
            <form class="likeForm" data-post-id="${post.id}">
              <button class="border-0 bg-transparent p-0">
                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="${post.usersLiked.includes(loggedUserId) ? 'red' : '#e3e3e3'}">
                  <path d="m480-120-58-52q-101-91-167-157T150-447.5Q111-500 95.5-544T80-634q0-94 63-157t157-63q52 0 99 22t81 62q34-40 81-62t99-22q94 0 157 63t63 157q0 46-15.5 90T810-447.5Q771-395 705-329T538-172l-58 52Z" />
                </svg>
                            <span id="like-count-${post.id}">${post.usersLiked.length}</span>
              </button>
            </form>
            <button class="btn text-dark" style="cursor: pointer;" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="black" class="align-middle d-inline-block me-2 mb-1">
                                    <path d="M240-400h320v-80H240v80Zm0-120h480v-80H240v80Zm0-120h480v-80H240v80ZM80-80v-720q0-33 23.5-56.5T160-880h640q33 0 56.5 23.5T880-800v480q0 33-23.5 56.5T800-240H240L80-80Zm126-240h594v-480H160v525l46-45Zm-46 0v-480 480Z" />
                                </svg>
                                <span id="comment-count-${post.id}">${post.comments.length}</span>
                            </button>
                                <div class="modal fade" id="exampleModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
                  <form id="replyForm1">
          <div class="modal-body">
            <div class="d-flex gap-1">
                    <img src="/@imageUrl" alt="Profile Picture" class="rounded-circle me-3" width="50" height="50" />
                    <input class="form-control shadow-sm py-3" placeholder="Post your reply" id="PostCommentContent1"/>
          </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Reply</button>
          </div>
                                          </form>
        </div>
      </div>
    </div>
          </div>
        </div>
      </div>
    </div>
    `
                )
       };

    const CommentCard = (comment) => {
           return( `    <div class="container bg-white my-3 rounded-1 shadow-sm post" style="max-width:600px;">
      <div class="d-flex align-items-start p-3">
        <img src="/${comment.user.profilePictureUrl}" alt="Profile Picture" class="rounded-circle me-3" width="50" height="50" />

        <div class="flex-grow-1">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <strong class="me-2">${comment.user.userName}</strong>
              <span class="text-muted me-2">·</span>
              <small class="text-muted timestamp">
                ${new Date(comment.createdAt).toLocaleString(undefined, {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                  hour: 'numeric',
                  minute: '2-digit'
                })}
              </small>
            </div>

            <div class="dropdown ">
              <button class="btn" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="black">
                  <path d="M240-400q-33 0-56.5-23.5T160-480q0-33 23.5-56.5T240-560q33 0 56.5 23.5T320-480q0 33-23.5 56.5T240-400Zm240 0q-33 0-56.5-23.5T400-480q0-33 23.5-56.5T480-560q33 0 56.5 23.5T560-480q0 33-23.5 56.5T480-400Zm240 0q-33 0-56.5-23.5T640-480q0-33 23.5-56.5T720-560q33 0 56.5 23.5T800-480q0 33-23.5 56.5T720-400Z" />
                </svg>
              </button>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <button type="button" class="dropdown-item edit" data-post-id="${comment.id}">Edit</button>
                <form class="deletePostForm" data-post-id="${comment.id}">
                  <button type="submit" class="dropdown-item">Delete</button>
                </form>
              </div>
            </div>
          </div>

          <div id="post-content-${comment.id}" class="text-xl-start mb-2">
            <p class="mb-2">${comment.text}</p>
          </div>
      </div>
    </div> 
      </div>`)
    }
    //fetch the post
    const FetchPost = async() => {
        try{
            const response = await axios.post("/post/GetPostsById", {
                postId : @postId
            })
            postData = response.data.data
            document.querySelector("#postArea").innerHTML += PostCard(postData)
            const commentsArea = document.querySelector("#commentsArea")
            postData.comments.forEach(c => {
                            commentsArea.innerHTML = CommentCard(c) + commentsArea.innerHTML
            })
            document.querySelector("#replyForm1").addEventListener("submit", PostComment)
        }catch(error){
            console.log("error fetching post", error)
        }
    }

    //post the comment
    const PostComment = async(e) => {
        e.preventDefault();
        try{
            const content = document.querySelector("#PostCommentContent1").value;
            console.log(postData.id)
            const response = await axios.post("/comment/AddComment", {
                PostId : parseInt(postData.id),
                Content : content
            },{
                 headers: {
                     "RequestVerificationToken" : document.getElementById("RequestVerificationToken").value
                 }
             });
             const commentsArea = document.querySelector("#commentsArea")
             console.log("k", response.data.data)
             commentsArea.innerHTML = CommentCard(response.data.data) + commentsArea.innerHTML
            console.log(response)
        }catch(error){
            console.log("error posting comment", error)
        }
    }

    document.addEventListener("DOMContentLoaded", FetchPost)
</script>