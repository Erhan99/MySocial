@model MySocial.WebUI.ViewModel.PostViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    ViewData["title"] = "detail";
    int postId = Model.postId; 
    string logged = Model.UserId;
    string imageUrl = Model.profilePictureUrl;
    var requestToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}
<input id="RequestVerificationToken" type="hidden" value="@requestToken" />

<div class="position-sticky top-0 end-0 px-3 py-2 bg-white border-bottom rounded-2 shadow-sm">
    <div class="d-flex gap-3">
        <a asp-controller="Home" asp-action="Index">
            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="black"><path d="m313-440 224 224-57 56-320-320 320-320 57 56-224 224h487v80H313Z" /></svg>
        </a>
    </div>
</div>
<div class="bg-white container" style="max-width:600px;">
    <section id="postArea">
    </section>
    <hr />
    <div class="container pb-3" style="max-width:600px;">
        <p class="fw-normal fs-5">Comments</p>
        <div class="d-flex gap-1">
            <img src="@imageUrl" alt="Profile Picture" class="rounded-circle me-3" width="50" height="50" />
            <input class="form-control shadow-sm py-1" placeholder="Post your reply" id="PostCommentContent2" />
            <button id="sendButton" value="Send Message" class="btn btn-primary">
                <svg xmlns="http://www.w3.org/2000/svg" height="25px" viewBox="0 -960 960 960" width="25px" fill="#e3e3e3"><path d="M120-160v-640l760 320-760 320Zm80-120 474-200-474-200v140l240 60-240 60v140Zm0 0v-400 400Z" /></svg>
            </button>
        </div>
    </div>
    <section id="commentsArea">
    </section>
</div>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/editorjs-html@4.0.0/.build/edjsHTML.browser.js"></script>
<script>
    let postData; 
    let comments;
    const baseUrl = "https://localhost:7164/api/";
    const loggedUserId = "@logged";
    const edjsParser = edjsHTML();

    const PostCard = (post) => {
        const data = JSON.parse(post.content);
        const html = edjsParser.parse(data);
        return(
                   `<div class="container my-3 post" style="max-width:600px;">
      <div class="d-flex align-items-start p-3">
        <img src="${post.user.profilePictureUrl}" alt="Profile Picture" class="rounded-circle me-3" width="50" height="50" />

        <div class="flex-grow-1">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <strong class="me-2">${post.user.userName}</strong>
              <span class="text-muted me-2">·</span>
              <small class="text-muted timestamp">
                ${new Date(post.createdAt).toLocaleString(undefined, {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                  hour: 'numeric',
                  minute: '2-digit'
                })}
              </small>
            </div>
          </div>

          <div id="post-content-${post.id}" class="text-xl-start mb-2">
            <p class="mb-2">${html}</p>
          </div>

          <div class="d-flex align-items-center gap-3 mt-3">
            <form class="likeForm" data-post-id="${post.id}">
              <button class="border-0 bg-transparent p-0">
                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="${post.usersLiked.includes(loggedUserId) ? 'red' : '#e3e3e3'}">
                  <path d="m480-120-58-52q-101-91-167-157T150-447.5Q111-500 95.5-544T80-634q0-94 63-157t157-63q52 0 99 22t81 62q34-40 81-62t99-22q94 0 157 63t63 157q0 46-15.5 90T810-447.5Q771-395 705-329T538-172l-58 52Z" />
                </svg>
                            <span id="like-count-${post.id}">${post.usersLiked.length}</span>
              </button>
            </form>
            <button class="btn text-dark" style="cursor: pointer;" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="black" class="align-middle d-inline-block me-2 mb-1">
                                    <path d="M240-400h320v-80H240v80Zm0-120h480v-80H240v80Zm0-120h480v-80H240v80ZM80-80v-720q0-33 23.5-56.5T160-880h640q33 0 56.5 23.5T880-800v480q0 33-23.5 56.5T800-240H240L80-80Zm126-240h594v-480H160v525l46-45Zm-46 0v-480 480Z" />
                                </svg>
                                <span id="comment-count-${post.id}">${post.comments.length}</span>
                            </button>
                                <div class="modal fade" id="exampleModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
                  <form id="replyForm1">
          <div class="modal-body">
            <div class="d-flex gap-1">
                    <img src="@imageUrl" alt="Profile Picture" class="rounded-circle me-3" width="50" height="50" />
                    <input class="form-control shadow-sm py-3" placeholder="Post your reply" id="PostCommentContent1"/>
          </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Reply</button>
          </div>
                                          </form>
        </div>
      </div>
    </div>
          </div>
        </div>
      </div>
    </div>
    `
                )
       };

    const CommentCard = (comment, canEdit, canDelete) => {
        const isModified = comment.isModified ? " (edited)" : "";
           return( `
           <div class="container my-3 rounded-1 comment" style="max-width:600px;">
      <div class="d-flex align-items-start p-3">
        <img src="${comment.user.profilePictureUrl}" alt="Profile Picture" class="rounded-circle me-3" width="50" height="50" />

        <div class="flex-grow-1">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <strong class="me-2">${comment.user.userName}</strong>
              <span class="text-muted me-2">·</span>
              <small class="text-muted timestamp" id="comment-date-${comment.id}">
                ${new Date(comment.createdAt).toLocaleString(undefined, {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                  hour: 'numeric',
                  minute: '2-digit'
                }) + isModified}
              </small>
            </div>

             ${canEdit || canDelete ? `
            <div class="dropdown ">
              <button class="btn" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="black">
                  <path d="M240-400q-33 0-56.5-23.5T160-480q0-33 23.5-56.5T240-560q33 0 56.5 23.5T320-480q0 33-23.5 56.5T240-400Zm240 0q-33 0-56.5-23.5T400-480q0-33 23.5-56.5T480-560q33 0 56.5 23.5T560-480q0 33-23.5 56.5T480-400Zm240 0q-33 0-56.5-23.5T640-480q0-33 23.5-56.5T720-560q33 0 56.5 23.5T800-480q0 33-23.5 56.5T720-400Z" />
                </svg>
              </button>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                ${ canEdit ?
                `<button type="button" class="dropdown-item edit" data-comment-id="${comment.id}">Edit</button>` : ""
              }
                <form class="deleteCommentForm" data-comment-id="${comment.id}">
                  <button type="submit" class="dropdown-item">Delete</button>
                </form>
              </div>
            </div>
            `: ""}
          </div>

          <div id="comment-content-${comment.id}" class="text-xl-start mb-2">
            <p class="mb-2">${comment.content}</p>
          </div>
      </div>
    </div> 
      </div>`)
    }
    //fetch the post
    const FetchPost = async() => {
        try{
            const response = await axios.get(baseUrl + `post/@postId`, {withCredentials: true})
            postData = response.data
            document.querySelector("#postArea").innerHTML += PostCard(postData)

        }catch(error){
            console.log("error fetching post", error)
        }
        try{
            const response2 = await axios.get(baseUrl + `comment/post/@postId`, {withCredentials: true})
            const commentsArea = document.querySelector("#commentsArea")
            comments = response2.data
            console.log(comments)
            if(comments.length == 0){
                commentsArea.innerHTML = `<p class="text-muted fst-italic text-center">No comments yet. Be the first to comment!</p>`
            }
            comments.forEach(c => {
                            commentsArea.innerHTML = CommentCard(c.comment, c.canEdit, c.canDelete) + commentsArea.innerHTML
            })
        }catch(error){
            console.log("error fetching comments", error)
        }
        document.querySelector("#replyForm1").addEventListener("submit", PostComment)
        LikeButtonEventHandler();
        attachDeleteHandlers();
        AttachEditButtonHandler();
        CancelEditButtonHandler();
        ConfirmEditButtonHandler();
    }

    //post the comment (modal)
    const PostComment = async(e) => {
        e.preventDefault();
        try{
            const content = document.querySelector("#PostCommentContent1").value;
            const response = await axios.post(baseUrl + `comment`, {
                PostId : parseInt(postData.id),
                Content : content,
                UserId: loggedUserId,
            },{
                 headers: {
                     "RequestVerificationToken" : document.getElementById("RequestVerificationToken").value
                 },
                 withCredentials: true
             });
             const comment = response.data;
             postData.comments.push(comment)
             const commentsArea = document.querySelector("#commentsArea");
             commentsArea.innerHTML = CommentCard(response.data, true) + commentsArea.innerHTML;

             const commentCount = document.querySelector(`#comment-count-${postData.id}`)
             commentCount.innerHTML = parseInt(postData.comments.length)
        attachDeleteHandlers();
        AttachEditButtonHandler();
        CancelEditButtonHandler();
        ConfirmEditButtonHandler();
        }catch(error){
            console.log("error posting comment", error)
        }
    }

    //post comment
    const PostComment2 = async(e) => {
        e.preventDefault();
        try{
            const content = document.querySelector("#PostCommentContent2").value;
            const response = await axios.post(baseUrl + `comment`, {
                PostId : parseInt(postData.id),
                Content : content,
                UserId: loggedUserId,
            },{
                 headers: {
                     "RequestVerificationToken" : document.getElementById("RequestVerificationToken").value
                 },
                 withCredentials: true
             });
             const comment = response.data;
             postData.comments.push(comment)
             const commentsArea = document.querySelector("#commentsArea");
             commentsArea.innerHTML = CommentCard(response.data, true) + commentsArea.innerHTML;
             
             const commentCount = document.querySelector(`#comment-count-${postData.id}`)
             commentCount.innerHTML = parseInt(postData.comments.length)
            attachDeleteHandlers();
            AttachEditButtonHandler();
            CancelEditButtonHandler();
            ConfirmEditButtonHandler();
        }catch(error){
            console.log("error posting comment", error)
        }
    }

    // like logic
       const LikeButtonEventHandler = async () => {
          document.querySelectorAll(".likeForm").forEach(button => {
             button.addEventListener("submit", async function (e) {
                e.preventDefault();

                const svg = this.querySelector("svg");
                const postId = this.dataset.postId;
                const countEl = document.getElementById(`like-count-${postId}`);
                let isLiked = postData.usersLiked.includes(loggedUserId);

                try {
                    if(isLiked){
                        await axios.put(baseUrl + "Like/", { postId: parseInt(postId), userId: loggedUserId }, { headers: {"RequestVerificationToken" : document.getElementById("RequestVerificationToken").value}, withCredentials: true })
                    }
                    else{
                        await axios.post(baseUrl + "Like/", { postId: parseInt(postId), userId: loggedUserId }, {headers: {"RequestVerificationToken" : document.getElementById("RequestVerificationToken").value}, withCredentials: true});
                    }
                   const likeState = !isLiked;
                   svg.setAttribute("fill", likeState ? "red" : "#e3e3e3");
                   let currentLikes = parseInt(countEl.textContent);
                   countEl.textContent = likeState ? currentLikes + 1 : currentLikes - 1;
                   if (likeState && !postData.usersLiked.includes(loggedUserId)) {
                      postData.usersLiked.push(loggedUserId);
                   } else if (!likeState){
                      postData.usersLiked = postData.usersLiked.filter(id => id !== loggedUserId);
                   }
                } catch (error) {
                   console.error("Error liking post", error);
                }
             });
          });
       };

       // remove a post
       const deleteComment = async (e) => {
           e.preventDefault();
           try{
               const commentId = e.currentTarget.dataset.commentId
               axios.put(baseUrl + `comment/remove/${commentId}`, null,
               {
                   headers: {
                       'RequestVerificationToken': document.getElementById("RequestVerificationToken").value
                   },
                   withCredentials: true
               }
               );
               const card = e.currentTarget.closest(".comment");
               card.remove();
               comments = comments.filter(c => c.comment.id != commentId);
               postData.comments = comments;
               const commentCount = document.querySelector(`#comment-count-${postData.id}`)
                commentCount.innerHTML = parseInt(postData.comments.length)
           }catch(error){
               console.error("Delete comment failed", error)
           }
       };

       const attachDeleteHandlers = () => {
           const deleteForms = document.querySelectorAll(".deleteCommentForm");

           deleteForms.forEach(form => {
               form.removeEventListener("submit", deleteComment)
               form.addEventListener("submit", deleteComment)
           }
           );
       };

       const EditButtonClick = (e) => {
           e.preventDefault();
           const commentId = e.currentTarget.dataset.commentId;
           const contentArea = document.querySelector(`#comment-content-${commentId}`);
           const prevContent = contentArea.querySelector("p").innerHTML;
           contentArea.innerHTML = `
                   <form class="align-items-end">
                    <input type="text" class="form-control rounded-2 shadow-sm py-3" id="editContent" value="${prevContent}"/>
                    <div class="d-flex justify-content-end gap-1 mt-2">
                        <button type="button" class="btn btn-primary px-3 rounded-2 cancel" data-comment-id="${commentId}">Cancel</button>
                        <button type="submit" class="btn btn-primary px-3 rounded-2 edit-2" data-comment-id="${commentId}">Edit</button>
                    </div>
                   </form>`;
                   CancelEditButtonHandler();
                   ConfirmEditButtonHandler();
                   AttachEditButtonHandler();
                CancelEditButtonHandler();
                ConfirmEditButtonHandler();
       }

       const AttachEditButtonHandler = () => {
           const editButtons = document.querySelectorAll(".edit");
           editButtons.forEach(btn => {
               btn.addEventListener("click", EditButtonClick)
           });
       };

       const CancelEditButtonClick = (e) => {
           e.preventDefault()
           const commentId = e.currentTarget.dataset.commentId
           const contentArea = document.querySelector(`#comment-content-${commentId}`)
           const content = comments.find(c => c.comment.id == commentId).comment.content
           contentArea.innerHTML = `
                   <p>${content}</p>`;
       };

       const CancelEditButtonHandler = () => {
           const cancelButtons = document.querySelectorAll(".cancel");
           cancelButtons.forEach(btn => {
               btn.addEventListener("click", CancelEditButtonClick)
           });
       };

       // edit
       const ConfirmEditButtonClick = (e) => {
           e.preventDefault();
           try{
               const commentId = e.currentTarget.dataset.commentId
               const content = document.querySelector("#editContent").value
               axios.put(baseUrl + `comment/${commentId}`, {
                   Content: content
               },
               {
                   headers: {
                       'RequestVerificationToken': document.getElementById("RequestVerificationToken").value
                   },
                   withCredentials: true
               }
               );
               const contentArea = document.querySelector(`#comment-content-${commentId}`);
               const dateArea = document.querySelector(`#comment-date-${commentId}`);

               contentArea.innerHTML = `
                   <p>${content}</p>`;

               if(!dateArea.innerHTML.includes("edited")){
                  dateArea.innerHTML += " (edited)"
               }
               const comment = comments.find(c => c.comment.id == commentId).comment.content
               if(comment){
                   comment.content = content;
                   comment.isModified = true;
               };
           }catch(error){
               console.error("Edit comment failed", error)
           }
       };

       const ConfirmEditButtonHandler = () => {
           const editButtons = document.querySelectorAll(".edit-2");
           editButtons.forEach(btn => {
               btn.addEventListener("click", ConfirmEditButtonClick)
           });
       };
    document.addEventListener("DOMContentLoaded", FetchPost)
    document.querySelector("#sendButton").addEventListener("click", PostComment2)
</script>